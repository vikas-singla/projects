//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CareerPath_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CareerPath", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CareerPath), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CareerTrack_CareerPath", "CareerPath", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.CareerPath), "CareerTrack", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CareerTrack), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CareerTrack_CareerPosition", "CareerPosition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.CareerPosition), "CareerTrack", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CareerTrack), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyClassification_Classification", "Classification", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Classification), "CompanyClassification", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyClassification), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyClassification_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyClassification", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyClassification), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyLocation_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyLocation), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyMedia_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyMedia", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyMedia), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyScoopData_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyScoopData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyScoopData), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyScoops_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyScoops", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyScoop), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyServiceArea_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyServiceArea", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyServiceArea), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyTrends_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyTrends", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyTrend), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyType_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Company), "CompanyType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyType), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.CompanyIndustry), "CompanyIndustry1", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Rainforest.BridgesAndLadders.Data.CompanyIndustry), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyIndustry_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Industry), "CompanyIndustry", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyIndustry), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyLocation_Location", "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Location), "CompanyLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyLocation), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyMedia_Media", "Media", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Medium), "CompanyMedia", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyMedia), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyServiceArea_ServiceArea", "ServiceArea", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.ServiceArea), "CompanyServiceArea", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyServiceArea), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_CompanyType_CompanyTypes", "CompanyTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.CompanyType1), "CompanyType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.CompanyType), true)]
[assembly: EdmRelationshipAttribute("BridgesAndLaddersModel", "FK_Location_Country", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rainforest.BridgesAndLadders.Data.Country), "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rainforest.BridgesAndLadders.Data.Location), true)]

#endregion

namespace Rainforest.BridgesAndLadders.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class BridgesAndLaddersEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new BridgesAndLaddersEntities object using the connection string found in the 'BridgesAndLaddersEntities' section of the application configuration file.
        /// </summary>
        public BridgesAndLaddersEntities() : base("name=BridgesAndLaddersEntities", "BridgesAndLaddersEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new BridgesAndLaddersEntities object.
        /// </summary>
        public BridgesAndLaddersEntities(string connectionString) : base(connectionString, "BridgesAndLaddersEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new BridgesAndLaddersEntities object.
        /// </summary>
        public BridgesAndLaddersEntities(EntityConnection connection) : base(connection, "BridgesAndLaddersEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CareerPath> CareerPaths
        {
            get
            {
                if ((_CareerPaths == null))
                {
                    _CareerPaths = base.CreateObjectSet<CareerPath>("CareerPaths");
                }
                return _CareerPaths;
            }
        }
        private ObjectSet<CareerPath> _CareerPaths;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CareerPosition> CareerPositions
        {
            get
            {
                if ((_CareerPositions == null))
                {
                    _CareerPositions = base.CreateObjectSet<CareerPosition>("CareerPositions");
                }
                return _CareerPositions;
            }
        }
        private ObjectSet<CareerPosition> _CareerPositions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CareerTrack> CareerTracks
        {
            get
            {
                if ((_CareerTracks == null))
                {
                    _CareerTracks = base.CreateObjectSet<CareerTrack>("CareerTracks");
                }
                return _CareerTracks;
            }
        }
        private ObjectSet<CareerTrack> _CareerTracks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Classification> Classifications
        {
            get
            {
                if ((_Classifications == null))
                {
                    _Classifications = base.CreateObjectSet<Classification>("Classifications");
                }
                return _Classifications;
            }
        }
        private ObjectSet<Classification> _Classifications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Company> Companies
        {
            get
            {
                if ((_Companies == null))
                {
                    _Companies = base.CreateObjectSet<Company>("Companies");
                }
                return _Companies;
            }
        }
        private ObjectSet<Company> _Companies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyClassification> CompanyClassifications
        {
            get
            {
                if ((_CompanyClassifications == null))
                {
                    _CompanyClassifications = base.CreateObjectSet<CompanyClassification>("CompanyClassifications");
                }
                return _CompanyClassifications;
            }
        }
        private ObjectSet<CompanyClassification> _CompanyClassifications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyIndustry> CompanyIndustries
        {
            get
            {
                if ((_CompanyIndustries == null))
                {
                    _CompanyIndustries = base.CreateObjectSet<CompanyIndustry>("CompanyIndustries");
                }
                return _CompanyIndustries;
            }
        }
        private ObjectSet<CompanyIndustry> _CompanyIndustries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyLocation> CompanyLocations
        {
            get
            {
                if ((_CompanyLocations == null))
                {
                    _CompanyLocations = base.CreateObjectSet<CompanyLocation>("CompanyLocations");
                }
                return _CompanyLocations;
            }
        }
        private ObjectSet<CompanyLocation> _CompanyLocations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyMedia> CompanyMedias
        {
            get
            {
                if ((_CompanyMedias == null))
                {
                    _CompanyMedias = base.CreateObjectSet<CompanyMedia>("CompanyMedias");
                }
                return _CompanyMedias;
            }
        }
        private ObjectSet<CompanyMedia> _CompanyMedias;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyScoopData> CompanyScoopDatas
        {
            get
            {
                if ((_CompanyScoopDatas == null))
                {
                    _CompanyScoopDatas = base.CreateObjectSet<CompanyScoopData>("CompanyScoopDatas");
                }
                return _CompanyScoopDatas;
            }
        }
        private ObjectSet<CompanyScoopData> _CompanyScoopDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyScoop> CompanyScoops
        {
            get
            {
                if ((_CompanyScoops == null))
                {
                    _CompanyScoops = base.CreateObjectSet<CompanyScoop>("CompanyScoops");
                }
                return _CompanyScoops;
            }
        }
        private ObjectSet<CompanyScoop> _CompanyScoops;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyServiceArea> CompanyServiceAreas
        {
            get
            {
                if ((_CompanyServiceAreas == null))
                {
                    _CompanyServiceAreas = base.CreateObjectSet<CompanyServiceArea>("CompanyServiceAreas");
                }
                return _CompanyServiceAreas;
            }
        }
        private ObjectSet<CompanyServiceArea> _CompanyServiceAreas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyTrend> CompanyTrends
        {
            get
            {
                if ((_CompanyTrends == null))
                {
                    _CompanyTrends = base.CreateObjectSet<CompanyTrend>("CompanyTrends");
                }
                return _CompanyTrends;
            }
        }
        private ObjectSet<CompanyTrend> _CompanyTrends;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyType> CompanyTypes
        {
            get
            {
                if ((_CompanyTypes == null))
                {
                    _CompanyTypes = base.CreateObjectSet<CompanyType>("CompanyTypes");
                }
                return _CompanyTypes;
            }
        }
        private ObjectSet<CompanyType> _CompanyTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyType1> CompanyTypes1
        {
            get
            {
                if ((_CompanyTypes1 == null))
                {
                    _CompanyTypes1 = base.CreateObjectSet<CompanyType1>("CompanyTypes1");
                }
                return _CompanyTypes1;
            }
        }
        private ObjectSet<CompanyType1> _CompanyTypes1;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Industry> Industries
        {
            get
            {
                if ((_Industries == null))
                {
                    _Industries = base.CreateObjectSet<Industry>("Industries");
                }
                return _Industries;
            }
        }
        private ObjectSet<Industry> _Industries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Location> Locations
        {
            get
            {
                if ((_Locations == null))
                {
                    _Locations = base.CreateObjectSet<Location>("Locations");
                }
                return _Locations;
            }
        }
        private ObjectSet<Location> _Locations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Medium> Media
        {
            get
            {
                if ((_Media == null))
                {
                    _Media = base.CreateObjectSet<Medium>("Media");
                }
                return _Media;
            }
        }
        private ObjectSet<Medium> _Media;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ServiceArea> ServiceAreas
        {
            get
            {
                if ((_ServiceAreas == null))
                {
                    _ServiceAreas = base.CreateObjectSet<ServiceArea>("ServiceAreas");
                }
                return _ServiceAreas;
            }
        }
        private ObjectSet<ServiceArea> _ServiceAreas;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CareerPaths EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCareerPaths(CareerPath careerPath)
        {
            base.AddObject("CareerPaths", careerPath);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CareerPositions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCareerPositions(CareerPosition careerPosition)
        {
            base.AddObject("CareerPositions", careerPosition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CareerTracks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCareerTracks(CareerTrack careerTrack)
        {
            base.AddObject("CareerTracks", careerTrack);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Classifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClassifications(Classification classification)
        {
            base.AddObject("Classifications", classification);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Companies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanies(Company company)
        {
            base.AddObject("Companies", company);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyClassifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyClassifications(CompanyClassification companyClassification)
        {
            base.AddObject("CompanyClassifications", companyClassification);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyIndustries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyIndustries(CompanyIndustry companyIndustry)
        {
            base.AddObject("CompanyIndustries", companyIndustry);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyLocations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyLocations(CompanyLocation companyLocation)
        {
            base.AddObject("CompanyLocations", companyLocation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyMedias EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyMedias(CompanyMedia companyMedia)
        {
            base.AddObject("CompanyMedias", companyMedia);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyScoopDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyScoopDatas(CompanyScoopData companyScoopData)
        {
            base.AddObject("CompanyScoopDatas", companyScoopData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyScoops EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyScoops(CompanyScoop companyScoop)
        {
            base.AddObject("CompanyScoops", companyScoop);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyServiceAreas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyServiceAreas(CompanyServiceArea companyServiceArea)
        {
            base.AddObject("CompanyServiceAreas", companyServiceArea);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyTrends EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyTrends(CompanyTrend companyTrend)
        {
            base.AddObject("CompanyTrends", companyTrend);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyTypes(CompanyType companyType)
        {
            base.AddObject("CompanyTypes", companyType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyTypes1 EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyTypes1(CompanyType1 companyType1)
        {
            base.AddObject("CompanyTypes1", companyType1);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Industries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustries(Industry industry)
        {
            base.AddObject("Industries", industry);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Locations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLocations(Location location)
        {
            base.AddObject("Locations", location);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Media EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMedia(Medium medium)
        {
            base.AddObject("Media", medium);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ServiceAreas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServiceAreas(ServiceArea serviceArea)
        {
            base.AddObject("ServiceAreas", serviceArea);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CareerPath")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CareerPath : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CareerPath object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        public static CareerPath CreateCareerPath(global::System.Int64 id, global::System.String name, global::System.Int64 companyId)
        {
            CareerPath careerPath = new CareerPath();
            careerPath.id = id;
            careerPath.name = name;
            careerPath.companyId = companyId;
            return careerPath;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CareerPath_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CareerPath_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CareerPath_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CareerPath_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CareerPath_Company", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CareerTrack_CareerPath", "CareerTrack")]
        public EntityCollection<CareerTrack> CareerTracks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CareerTrack>("BridgesAndLaddersModel.FK_CareerTrack_CareerPath", "CareerTrack");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CareerTrack>("BridgesAndLaddersModel.FK_CareerTrack_CareerPath", "CareerTrack", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CareerPosition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CareerPosition : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CareerPosition object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="salaryLow">Initial value of the salaryLow property.</param>
        /// <param name="salaryHigh">Initial value of the salaryHigh property.</param>
        /// <param name="responsibilities">Initial value of the responsibilities property.</param>
        /// <param name="competencies">Initial value of the competencies property.</param>
        /// <param name="qualifications">Initial value of the qualifications property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        public static CareerPosition CreateCareerPosition(global::System.Int64 id, global::System.Decimal salaryLow, global::System.Decimal salaryHigh, global::System.String responsibilities, global::System.String competencies, global::System.String qualifications, global::System.Int64 companyId)
        {
            CareerPosition careerPosition = new CareerPosition();
            careerPosition.id = id;
            careerPosition.salaryLow = salaryLow;
            careerPosition.salaryHigh = salaryHigh;
            careerPosition.responsibilities = responsibilities;
            careerPosition.competencies = competencies;
            careerPosition.qualifications = qualifications;
            careerPosition.companyId = companyId;
            return careerPosition;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String summary
        {
            get
            {
                return _summary;
            }
            set
            {
                OnsummaryChanging(value);
                ReportPropertyChanging("summary");
                _summary = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("summary");
                OnsummaryChanged();
            }
        }
        private global::System.String _summary;
        partial void OnsummaryChanging(global::System.String value);
        partial void OnsummaryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal salaryLow
        {
            get
            {
                return _salaryLow;
            }
            set
            {
                OnsalaryLowChanging(value);
                ReportPropertyChanging("salaryLow");
                _salaryLow = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("salaryLow");
                OnsalaryLowChanged();
            }
        }
        private global::System.Decimal _salaryLow;
        partial void OnsalaryLowChanging(global::System.Decimal value);
        partial void OnsalaryLowChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal salaryHigh
        {
            get
            {
                return _salaryHigh;
            }
            set
            {
                OnsalaryHighChanging(value);
                ReportPropertyChanging("salaryHigh");
                _salaryHigh = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("salaryHigh");
                OnsalaryHighChanged();
            }
        }
        private global::System.Decimal _salaryHigh;
        partial void OnsalaryHighChanging(global::System.Decimal value);
        partial void OnsalaryHighChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String responsibilities
        {
            get
            {
                return _responsibilities;
            }
            set
            {
                OnresponsibilitiesChanging(value);
                ReportPropertyChanging("responsibilities");
                _responsibilities = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("responsibilities");
                OnresponsibilitiesChanged();
            }
        }
        private global::System.String _responsibilities;
        partial void OnresponsibilitiesChanging(global::System.String value);
        partial void OnresponsibilitiesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String competencies
        {
            get
            {
                return _competencies;
            }
            set
            {
                OncompetenciesChanging(value);
                ReportPropertyChanging("competencies");
                _competencies = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("competencies");
                OncompetenciesChanged();
            }
        }
        private global::System.String _competencies;
        partial void OncompetenciesChanging(global::System.String value);
        partial void OncompetenciesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String qualifications
        {
            get
            {
                return _qualifications;
            }
            set
            {
                OnqualificationsChanging(value);
                ReportPropertyChanging("qualifications");
                _qualifications = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("qualifications");
                OnqualificationsChanged();
            }
        }
        private global::System.String _qualifications;
        partial void OnqualificationsChanging(global::System.String value);
        partial void OnqualificationsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CareerTrack_CareerPosition", "CareerTrack")]
        public EntityCollection<CareerTrack> CareerTracks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CareerTrack>("BridgesAndLaddersModel.FK_CareerTrack_CareerPosition", "CareerTrack");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CareerTrack>("BridgesAndLaddersModel.FK_CareerTrack_CareerPosition", "CareerTrack", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CareerTrack")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CareerTrack : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CareerTrack object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="sequence">Initial value of the sequence property.</param>
        /// <param name="positionId">Initial value of the positionId property.</param>
        /// <param name="pathId">Initial value of the pathId property.</param>
        public static CareerTrack CreateCareerTrack(global::System.Int64 id, global::System.Int32 sequence, global::System.Int64 positionId, global::System.Int64 pathId)
        {
            CareerTrack careerTrack = new CareerTrack();
            careerTrack.id = id;
            careerTrack.sequence = sequence;
            careerTrack.positionId = positionId;
            careerTrack.pathId = pathId;
            return careerTrack;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 sequence
        {
            get
            {
                return _sequence;
            }
            set
            {
                OnsequenceChanging(value);
                ReportPropertyChanging("sequence");
                _sequence = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("sequence");
                OnsequenceChanged();
            }
        }
        private global::System.Int32 _sequence;
        partial void OnsequenceChanging(global::System.Int32 value);
        partial void OnsequenceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 positionId
        {
            get
            {
                return _positionId;
            }
            set
            {
                OnpositionIdChanging(value);
                ReportPropertyChanging("positionId");
                _positionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("positionId");
                OnpositionIdChanged();
            }
        }
        private global::System.Int64 _positionId;
        partial void OnpositionIdChanging(global::System.Int64 value);
        partial void OnpositionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 pathId
        {
            get
            {
                return _pathId;
            }
            set
            {
                OnpathIdChanging(value);
                ReportPropertyChanging("pathId");
                _pathId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("pathId");
                OnpathIdChanged();
            }
        }
        private global::System.Int64 _pathId;
        partial void OnpathIdChanging(global::System.Int64 value);
        partial void OnpathIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CareerTrack_CareerPath", "CareerPath")]
        public CareerPath CareerPath
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CareerPath>("BridgesAndLaddersModel.FK_CareerTrack_CareerPath", "CareerPath").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CareerPath>("BridgesAndLaddersModel.FK_CareerTrack_CareerPath", "CareerPath").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CareerPath> CareerPathReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CareerPath>("BridgesAndLaddersModel.FK_CareerTrack_CareerPath", "CareerPath");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CareerPath>("BridgesAndLaddersModel.FK_CareerTrack_CareerPath", "CareerPath", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CareerTrack_CareerPosition", "CareerPosition")]
        public CareerPosition CareerPosition
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CareerPosition>("BridgesAndLaddersModel.FK_CareerTrack_CareerPosition", "CareerPosition").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CareerPosition>("BridgesAndLaddersModel.FK_CareerTrack_CareerPosition", "CareerPosition").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CareerPosition> CareerPositionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CareerPosition>("BridgesAndLaddersModel.FK_CareerTrack_CareerPosition", "CareerPosition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CareerPosition>("BridgesAndLaddersModel.FK_CareerTrack_CareerPosition", "CareerPosition", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="Classification")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Classification : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Classification object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Classification CreateClassification(global::System.Int64 id, global::System.String name)
        {
            Classification classification = new Classification();
            classification.id = id;
            classification.name = name;
            return classification;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyClassification_Classification", "CompanyClassification")]
        public EntityCollection<CompanyClassification> CompanyClassifications
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyClassification>("BridgesAndLaddersModel.FK_CompanyClassification_Classification", "CompanyClassification");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyClassification>("BridgesAndLaddersModel.FK_CompanyClassification_Classification", "CompanyClassification", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="Company")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Company : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Company object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="headquartersLocationId">Initial value of the headquartersLocationId property.</param>
        /// <param name="foundingLocationid">Initial value of the foundingLocationid property.</param>
        /// <param name="metadataId">Initial value of the metadataId property.</param>
        public static Company CreateCompany(global::System.Int64 id, global::System.String name, global::System.Int64 headquartersLocationId, global::System.Int64 foundingLocationid, global::System.Int64 metadataId)
        {
            Company company = new Company();
            company.id = id;
            company.name = name;
            company.headquartersLocationId = headquartersLocationId;
            company.foundingLocationid = foundingLocationid;
            company.metadataId = metadataId;
            return company;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String siteUrl
        {
            get
            {
                return _siteUrl;
            }
            set
            {
                OnsiteUrlChanging(value);
                ReportPropertyChanging("siteUrl");
                _siteUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("siteUrl");
                OnsiteUrlChanged();
            }
        }
        private global::System.String _siteUrl;
        partial void OnsiteUrlChanging(global::System.String value);
        partial void OnsiteUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String logoUrl
        {
            get
            {
                return _logoUrl;
            }
            set
            {
                OnlogoUrlChanging(value);
                ReportPropertyChanging("logoUrl");
                _logoUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("logoUrl");
                OnlogoUrlChanged();
            }
        }
        private global::System.String _logoUrl;
        partial void OnlogoUrlChanging(global::System.String value);
        partial void OnlogoUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 headquartersLocationId
        {
            get
            {
                return _headquartersLocationId;
            }
            set
            {
                OnheadquartersLocationIdChanging(value);
                ReportPropertyChanging("headquartersLocationId");
                _headquartersLocationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("headquartersLocationId");
                OnheadquartersLocationIdChanged();
            }
        }
        private global::System.Int64 _headquartersLocationId;
        partial void OnheadquartersLocationIdChanging(global::System.Int64 value);
        partial void OnheadquartersLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 foundingLocationid
        {
            get
            {
                return _foundingLocationid;
            }
            set
            {
                OnfoundingLocationidChanging(value);
                ReportPropertyChanging("foundingLocationid");
                _foundingLocationid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("foundingLocationid");
                OnfoundingLocationidChanged();
            }
        }
        private global::System.Int64 _foundingLocationid;
        partial void OnfoundingLocationidChanging(global::System.Int64 value);
        partial void OnfoundingLocationidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> foundingDate
        {
            get
            {
                return _foundingDate;
            }
            set
            {
                OnfoundingDateChanging(value);
                ReportPropertyChanging("foundingDate");
                _foundingDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("foundingDate");
                OnfoundingDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _foundingDate;
        partial void OnfoundingDateChanging(Nullable<global::System.DateTime> value);
        partial void OnfoundingDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String summary
        {
            get
            {
                return _summary;
            }
            set
            {
                OnsummaryChanging(value);
                ReportPropertyChanging("summary");
                _summary = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("summary");
                OnsummaryChanged();
            }
        }
        private global::System.String _summary;
        partial void OnsummaryChanging(global::System.String value);
        partial void OnsummaryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 metadataId
        {
            get
            {
                return _metadataId;
            }
            set
            {
                OnmetadataIdChanging(value);
                ReportPropertyChanging("metadataId");
                _metadataId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("metadataId");
                OnmetadataIdChanged();
            }
        }
        private global::System.Int64 _metadataId;
        partial void OnmetadataIdChanging(global::System.Int64 value);
        partial void OnmetadataIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CareerPath_Company", "CareerPath")]
        public EntityCollection<CareerPath> CareerPaths
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CareerPath>("BridgesAndLaddersModel.FK_CareerPath_Company", "CareerPath");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CareerPath>("BridgesAndLaddersModel.FK_CareerPath_Company", "CareerPath", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyClassification_Company", "CompanyClassification")]
        public EntityCollection<CompanyClassification> CompanyClassifications
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyClassification>("BridgesAndLaddersModel.FK_CompanyClassification_Company", "CompanyClassification");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyClassification>("BridgesAndLaddersModel.FK_CompanyClassification_Company", "CompanyClassification", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyLocation_Company", "CompanyLocation")]
        public EntityCollection<CompanyLocation> CompanyLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyLocation>("BridgesAndLaddersModel.FK_CompanyLocation_Company", "CompanyLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyLocation>("BridgesAndLaddersModel.FK_CompanyLocation_Company", "CompanyLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyMedia_Company", "CompanyMedia")]
        public EntityCollection<CompanyMedia> CompanyMedias
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyMedia>("BridgesAndLaddersModel.FK_CompanyMedia_Company", "CompanyMedia");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyMedia>("BridgesAndLaddersModel.FK_CompanyMedia_Company", "CompanyMedia", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyScoopData_Company", "CompanyScoopData")]
        public EntityCollection<CompanyScoopData> CompanyScoopDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyScoopData>("BridgesAndLaddersModel.FK_CompanyScoopData_Company", "CompanyScoopData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyScoopData>("BridgesAndLaddersModel.FK_CompanyScoopData_Company", "CompanyScoopData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyScoops_Company", "CompanyScoops")]
        public EntityCollection<CompanyScoop> CompanyScoops
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyScoop>("BridgesAndLaddersModel.FK_CompanyScoops_Company", "CompanyScoops");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyScoop>("BridgesAndLaddersModel.FK_CompanyScoops_Company", "CompanyScoops", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyServiceArea_Company", "CompanyServiceArea")]
        public EntityCollection<CompanyServiceArea> CompanyServiceAreas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_Company", "CompanyServiceArea");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_Company", "CompanyServiceArea", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyTrends_Company", "CompanyTrends")]
        public EntityCollection<CompanyTrend> CompanyTrends
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyTrend>("BridgesAndLaddersModel.FK_CompanyTrends_Company", "CompanyTrends");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyTrend>("BridgesAndLaddersModel.FK_CompanyTrends_Company", "CompanyTrends", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyType_Company", "CompanyType")]
        public EntityCollection<CompanyType> CompanyTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyType>("BridgesAndLaddersModel.FK_CompanyType_Company", "CompanyType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyType>("BridgesAndLaddersModel.FK_CompanyType_Company", "CompanyType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyClassification")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyClassification : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyClassification object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        /// <param name="classificationId">Initial value of the classificationId property.</param>
        public static CompanyClassification CreateCompanyClassification(global::System.Int64 id, global::System.Int64 companyId, global::System.Int64 classificationId)
        {
            CompanyClassification companyClassification = new CompanyClassification();
            companyClassification.id = id;
            companyClassification.companyId = companyId;
            companyClassification.classificationId = classificationId;
            return companyClassification;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 classificationId
        {
            get
            {
                return _classificationId;
            }
            set
            {
                OnclassificationIdChanging(value);
                ReportPropertyChanging("classificationId");
                _classificationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("classificationId");
                OnclassificationIdChanged();
            }
        }
        private global::System.Int64 _classificationId;
        partial void OnclassificationIdChanging(global::System.Int64 value);
        partial void OnclassificationIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyClassification_Classification", "Classification")]
        public Classification Classification
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Classification>("BridgesAndLaddersModel.FK_CompanyClassification_Classification", "Classification").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Classification>("BridgesAndLaddersModel.FK_CompanyClassification_Classification", "Classification").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Classification> ClassificationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Classification>("BridgesAndLaddersModel.FK_CompanyClassification_Classification", "Classification");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Classification>("BridgesAndLaddersModel.FK_CompanyClassification_Classification", "Classification", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyClassification_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyClassification_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyClassification_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyClassification_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyClassification_Company", "Company", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyIndustry")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyIndustry : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyIndustry object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="industryId">Initial value of the industryId property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        public static CompanyIndustry CreateCompanyIndustry(global::System.Int64 id, global::System.Int64 industryId, global::System.Int64 companyId)
        {
            CompanyIndustry companyIndustry = new CompanyIndustry();
            companyIndustry.id = id;
            companyIndustry.industryId = industryId;
            companyIndustry.companyId = companyId;
            return companyIndustry;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 industryId
        {
            get
            {
                return _industryId;
            }
            set
            {
                OnindustryIdChanging(value);
                ReportPropertyChanging("industryId");
                _industryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("industryId");
                OnindustryIdChanged();
            }
        }
        private global::System.Int64 _industryId;
        partial void OnindustryIdChanging(global::System.Int64 value);
        partial void OnindustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry1")]
        public CompanyIndustry CompanyIndustry1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry1").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry1").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CompanyIndustry> CompanyIndustry1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry")]
        public CompanyIndustry CompanyIndustry2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CompanyIndustry> CompanyIndustry2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_CompanyIndustry", "CompanyIndustry", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyIndustry_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("BridgesAndLaddersModel.FK_CompanyIndustry_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("BridgesAndLaddersModel.FK_CompanyIndustry_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("BridgesAndLaddersModel.FK_CompanyIndustry_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("BridgesAndLaddersModel.FK_CompanyIndustry_Industry", "Industry", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyLocation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyLocation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyLocation object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        /// <param name="locationId">Initial value of the locationId property.</param>
        public static CompanyLocation CreateCompanyLocation(global::System.Int64 id, global::System.Int64 companyId, global::System.Int64 locationId)
        {
            CompanyLocation companyLocation = new CompanyLocation();
            companyLocation.id = id;
            companyLocation.companyId = companyId;
            companyLocation.locationId = locationId;
            return companyLocation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 locationId
        {
            get
            {
                return _locationId;
            }
            set
            {
                OnlocationIdChanging(value);
                ReportPropertyChanging("locationId");
                _locationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("locationId");
                OnlocationIdChanged();
            }
        }
        private global::System.Int64 _locationId;
        partial void OnlocationIdChanging(global::System.Int64 value);
        partial void OnlocationIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyLocation_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyLocation_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyLocation_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyLocation_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyLocation_Company", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyLocation_Location", "Location")]
        public Location Location
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("BridgesAndLaddersModel.FK_CompanyLocation_Location", "Location").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("BridgesAndLaddersModel.FK_CompanyLocation_Location", "Location").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Location> LocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("BridgesAndLaddersModel.FK_CompanyLocation_Location", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Location>("BridgesAndLaddersModel.FK_CompanyLocation_Location", "Location", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyMedia")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyMedia : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyMedia object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        /// <param name="mediaId">Initial value of the mediaId property.</param>
        public static CompanyMedia CreateCompanyMedia(global::System.Int64 id, global::System.Int64 companyId, global::System.Int64 mediaId)
        {
            CompanyMedia companyMedia = new CompanyMedia();
            companyMedia.id = id;
            companyMedia.companyId = companyId;
            companyMedia.mediaId = mediaId;
            return companyMedia;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 mediaId
        {
            get
            {
                return _mediaId;
            }
            set
            {
                OnmediaIdChanging(value);
                ReportPropertyChanging("mediaId");
                _mediaId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("mediaId");
                OnmediaIdChanged();
            }
        }
        private global::System.Int64 _mediaId;
        partial void OnmediaIdChanging(global::System.Int64 value);
        partial void OnmediaIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyMedia_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyMedia_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyMedia_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyMedia_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyMedia_Company", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyMedia_Media", "Media")]
        public Medium Medium
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medium>("BridgesAndLaddersModel.FK_CompanyMedia_Media", "Media").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medium>("BridgesAndLaddersModel.FK_CompanyMedia_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Medium> MediumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medium>("BridgesAndLaddersModel.FK_CompanyMedia_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Medium>("BridgesAndLaddersModel.FK_CompanyMedia_Media", "Media", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyScoop")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyScoop : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyScoop object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        /// <param name="summary">Initial value of the summary property.</param>
        /// <param name="description">Initial value of the description property.</param>
        public static CompanyScoop CreateCompanyScoop(global::System.Int64 id, global::System.Int64 companyId, global::System.String summary, global::System.String description)
        {
            CompanyScoop companyScoop = new CompanyScoop();
            companyScoop.id = id;
            companyScoop.companyId = companyId;
            companyScoop.summary = summary;
            companyScoop.description = description;
            return companyScoop;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String summary
        {
            get
            {
                return _summary;
            }
            set
            {
                OnsummaryChanging(value);
                ReportPropertyChanging("summary");
                _summary = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("summary");
                OnsummaryChanged();
            }
        }
        private global::System.String _summary;
        partial void OnsummaryChanging(global::System.String value);
        partial void OnsummaryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyScoops_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoops_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoops_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoops_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoops_Company", "Company", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyScoopData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyScoopData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyScoopData object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="data">Initial value of the data property.</param>
        /// <param name="isUpper">Initial value of the isUpper property.</param>
        /// <param name="companyScoopId">Initial value of the companyScoopId property.</param>
        public static CompanyScoopData CreateCompanyScoopData(global::System.Int64 id, global::System.String data, global::System.Boolean isUpper, global::System.Int64 companyScoopId)
        {
            CompanyScoopData companyScoopData = new CompanyScoopData();
            companyScoopData.id = id;
            companyScoopData.data = data;
            companyScoopData.isUpper = isUpper;
            companyScoopData.companyScoopId = companyScoopId;
            return companyScoopData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String data
        {
            get
            {
                return _data;
            }
            set
            {
                OndataChanging(value);
                ReportPropertyChanging("data");
                _data = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("data");
                OndataChanged();
            }
        }
        private global::System.String _data;
        partial void OndataChanging(global::System.String value);
        partial void OndataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean isUpper
        {
            get
            {
                return _isUpper;
            }
            set
            {
                OnisUpperChanging(value);
                ReportPropertyChanging("isUpper");
                _isUpper = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("isUpper");
                OnisUpperChanged();
            }
        }
        private global::System.Boolean _isUpper;
        partial void OnisUpperChanging(global::System.Boolean value);
        partial void OnisUpperChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyScoopId
        {
            get
            {
                return _companyScoopId;
            }
            set
            {
                OncompanyScoopIdChanging(value);
                ReportPropertyChanging("companyScoopId");
                _companyScoopId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyScoopId");
                OncompanyScoopIdChanged();
            }
        }
        private global::System.Int64 _companyScoopId;
        partial void OncompanyScoopIdChanging(global::System.Int64 value);
        partial void OncompanyScoopIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyScoopData_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoopData_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoopData_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoopData_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyScoopData_Company", "Company", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyServiceArea")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyServiceArea : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyServiceArea object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="serviceAreaId">Initial value of the serviceAreaId property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        public static CompanyServiceArea CreateCompanyServiceArea(global::System.Int64 id, global::System.Int64 serviceAreaId, global::System.Int64 companyId)
        {
            CompanyServiceArea companyServiceArea = new CompanyServiceArea();
            companyServiceArea.id = id;
            companyServiceArea.serviceAreaId = serviceAreaId;
            companyServiceArea.companyId = companyId;
            return companyServiceArea;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 serviceAreaId
        {
            get
            {
                return _serviceAreaId;
            }
            set
            {
                OnserviceAreaIdChanging(value);
                ReportPropertyChanging("serviceAreaId");
                _serviceAreaId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("serviceAreaId");
                OnserviceAreaIdChanged();
            }
        }
        private global::System.Int64 _serviceAreaId;
        partial void OnserviceAreaIdChanging(global::System.Int64 value);
        partial void OnserviceAreaIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyServiceArea_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyServiceArea_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyServiceArea_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyServiceArea_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyServiceArea_Company", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyServiceArea_ServiceArea", "ServiceArea")]
        public ServiceArea ServiceArea
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_ServiceArea", "ServiceArea").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_ServiceArea", "ServiceArea").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceArea> ServiceAreaReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_ServiceArea", "ServiceArea");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_ServiceArea", "ServiceArea", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyTrend")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyTrend : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyTrend object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        /// <param name="year">Initial value of the year property.</param>
        /// <param name="numEmployees">Initial value of the numEmployees property.</param>
        /// <param name="revenue">Initial value of the revenue property.</param>
        public static CompanyTrend CreateCompanyTrend(global::System.Int64 id, global::System.Int64 companyId, global::System.Int32 year, global::System.Int64 numEmployees, global::System.Decimal revenue)
        {
            CompanyTrend companyTrend = new CompanyTrend();
            companyTrend.id = id;
            companyTrend.companyId = companyId;
            companyTrend.year = year;
            companyTrend.numEmployees = numEmployees;
            companyTrend.revenue = revenue;
            return companyTrend;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 year
        {
            get
            {
                return _year;
            }
            set
            {
                OnyearChanging(value);
                ReportPropertyChanging("year");
                _year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("year");
                OnyearChanged();
            }
        }
        private global::System.Int32 _year;
        partial void OnyearChanging(global::System.Int32 value);
        partial void OnyearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 numEmployees
        {
            get
            {
                return _numEmployees;
            }
            set
            {
                OnnumEmployeesChanging(value);
                ReportPropertyChanging("numEmployees");
                _numEmployees = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("numEmployees");
                OnnumEmployeesChanged();
            }
        }
        private global::System.Int64 _numEmployees;
        partial void OnnumEmployeesChanging(global::System.Int64 value);
        partial void OnnumEmployeesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal revenue
        {
            get
            {
                return _revenue;
            }
            set
            {
                OnrevenueChanging(value);
                ReportPropertyChanging("revenue");
                _revenue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("revenue");
                OnrevenueChanged();
            }
        }
        private global::System.Decimal _revenue;
        partial void OnrevenueChanging(global::System.Decimal value);
        partial void OnrevenueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> reputationIndex
        {
            get
            {
                return _reputationIndex;
            }
            set
            {
                OnreputationIndexChanging(value);
                ReportPropertyChanging("reputationIndex");
                _reputationIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("reputationIndex");
                OnreputationIndexChanged();
            }
        }
        private Nullable<global::System.Int32> _reputationIndex;
        partial void OnreputationIndexChanging(Nullable<global::System.Int32> value);
        partial void OnreputationIndexChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> salaryIndex
        {
            get
            {
                return _salaryIndex;
            }
            set
            {
                OnsalaryIndexChanging(value);
                ReportPropertyChanging("salaryIndex");
                _salaryIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("salaryIndex");
                OnsalaryIndexChanged();
            }
        }
        private Nullable<global::System.Int32> _salaryIndex;
        partial void OnsalaryIndexChanging(Nullable<global::System.Int32> value);
        partial void OnsalaryIndexChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyTrends_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyTrends_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyTrends_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyTrends_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyTrends_Company", "Company", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyType object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="companyId">Initial value of the companyId property.</param>
        /// <param name="typeId">Initial value of the typeId property.</param>
        public static CompanyType CreateCompanyType(global::System.Int64 id, global::System.Int64 companyId, global::System.Int64 typeId)
        {
            CompanyType companyType = new CompanyType();
            companyType.id = id;
            companyType.companyId = companyId;
            companyType.typeId = typeId;
            return companyType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 companyId
        {
            get
            {
                return _companyId;
            }
            set
            {
                OncompanyIdChanging(value);
                ReportPropertyChanging("companyId");
                _companyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("companyId");
                OncompanyIdChanged();
            }
        }
        private global::System.Int64 _companyId;
        partial void OncompanyIdChanging(global::System.Int64 value);
        partial void OncompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 typeId
        {
            get
            {
                return _typeId;
            }
            set
            {
                OntypeIdChanging(value);
                ReportPropertyChanging("typeId");
                _typeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("typeId");
                OntypeIdChanged();
            }
        }
        private global::System.Int64 _typeId;
        partial void OntypeIdChanging(global::System.Int64 value);
        partial void OntypeIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyType_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyType_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyType_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyType_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("BridgesAndLaddersModel.FK_CompanyType_Company", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyType_CompanyTypes", "CompanyTypes")]
        public CompanyType1 CompanyType1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyType1>("BridgesAndLaddersModel.FK_CompanyType_CompanyTypes", "CompanyTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyType1>("BridgesAndLaddersModel.FK_CompanyType_CompanyTypes", "CompanyTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CompanyType1> CompanyType1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompanyType1>("BridgesAndLaddersModel.FK_CompanyType_CompanyTypes", "CompanyTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CompanyType1>("BridgesAndLaddersModel.FK_CompanyType_CompanyTypes", "CompanyTypes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="CompanyType1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyType1 : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompanyType1 object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static CompanyType1 CreateCompanyType1(global::System.Int64 id, global::System.String name)
        {
            CompanyType1 companyType1 = new CompanyType1();
            companyType1.id = id;
            companyType1.name = name;
            return companyType1;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyType_CompanyTypes", "CompanyType")]
        public EntityCollection<CompanyType> CompanyTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyType>("BridgesAndLaddersModel.FK_CompanyType_CompanyTypes", "CompanyType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyType>("BridgesAndLaddersModel.FK_CompanyType_CompanyTypes", "CompanyType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Country CreateCountry(global::System.Int64 id, global::System.String name)
        {
            Country country = new Country();
            country.id = id;
            country.name = name;
            return country;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_Location_Country", "Location")]
        public EntityCollection<Location> Locations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Location>("BridgesAndLaddersModel.FK_Location_Country", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Location>("BridgesAndLaddersModel.FK_Location_Country", "Location", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="Industry")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Industry : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Industry object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Industry CreateIndustry(global::System.Int64 id, global::System.String name)
        {
            Industry industry = new Industry();
            industry.id = id;
            industry.name = name;
            return industry;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyIndustry_Industry", "CompanyIndustry")]
        public EntityCollection<CompanyIndustry> CompanyIndustries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_Industry", "CompanyIndustry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyIndustry>("BridgesAndLaddersModel.FK_CompanyIndustry_Industry", "CompanyIndustry", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="Location")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Location : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Location object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="address1">Initial value of the address1 property.</param>
        /// <param name="city">Initial value of the city property.</param>
        /// <param name="countryId">Initial value of the countryId property.</param>
        public static Location CreateLocation(global::System.Int64 id, global::System.Byte[] address1, global::System.String city, global::System.Int64 countryId)
        {
            Location location = new Location();
            location.id = id;
            location.address1 = address1;
            location.city = city;
            location.countryId = countryId;
            return location;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] address1
        {
            get
            {
                return StructuralObject.GetValidValue(_address1);
            }
            set
            {
                Onaddress1Changing(value);
                ReportPropertyChanging("address1");
                _address1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("address1");
                Onaddress1Changed();
            }
        }
        private global::System.Byte[] _address1;
        partial void Onaddress1Changing(global::System.Byte[] value);
        partial void Onaddress1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String address2
        {
            get
            {
                return _address2;
            }
            set
            {
                Onaddress2Changing(value);
                ReportPropertyChanging("address2");
                _address2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("address2");
                Onaddress2Changed();
            }
        }
        private global::System.String _address2;
        partial void Onaddress2Changing(global::System.String value);
        partial void Onaddress2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String address3
        {
            get
            {
                return _address3;
            }
            set
            {
                Onaddress3Changing(value);
                ReportPropertyChanging("address3");
                _address3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("address3");
                Onaddress3Changed();
            }
        }
        private global::System.String _address3;
        partial void Onaddress3Changing(global::System.String value);
        partial void Onaddress3Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String city
        {
            get
            {
                return _city;
            }
            set
            {
                OncityChanging(value);
                ReportPropertyChanging("city");
                _city = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("city");
                OncityChanged();
            }
        }
        private global::System.String _city;
        partial void OncityChanging(global::System.String value);
        partial void OncityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String state
        {
            get
            {
                return _state;
            }
            set
            {
                OnstateChanging(value);
                ReportPropertyChanging("state");
                _state = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("state");
                OnstateChanged();
            }
        }
        private global::System.String _state;
        partial void OnstateChanging(global::System.String value);
        partial void OnstateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String subdivision
        {
            get
            {
                return _subdivision;
            }
            set
            {
                OnsubdivisionChanging(value);
                ReportPropertyChanging("subdivision");
                _subdivision = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("subdivision");
                OnsubdivisionChanged();
            }
        }
        private global::System.String _subdivision;
        partial void OnsubdivisionChanging(global::System.String value);
        partial void OnsubdivisionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 countryId
        {
            get
            {
                return _countryId;
            }
            set
            {
                OncountryIdChanging(value);
                ReportPropertyChanging("countryId");
                _countryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("countryId");
                OncountryIdChanged();
            }
        }
        private global::System.Int64 _countryId;
        partial void OncountryIdChanging(global::System.Int64 value);
        partial void OncountryIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyLocation_Location", "CompanyLocation")]
        public EntityCollection<CompanyLocation> CompanyLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyLocation>("BridgesAndLaddersModel.FK_CompanyLocation_Location", "CompanyLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyLocation>("BridgesAndLaddersModel.FK_CompanyLocation_Location", "CompanyLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_Location_Country", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("BridgesAndLaddersModel.FK_Location_Country", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("BridgesAndLaddersModel.FK_Location_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("BridgesAndLaddersModel.FK_Location_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("BridgesAndLaddersModel.FK_Location_Country", "Country", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="Medium")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Medium : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Medium object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Medium CreateMedium(global::System.Int64 id, global::System.Byte[] name)
        {
            Medium medium = new Medium();
            medium.id = id;
            medium.name = name;
            return medium;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] name
        {
            get
            {
                return StructuralObject.GetValidValue(_name);
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.Byte[] _name;
        partial void OnnameChanging(global::System.Byte[] value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String url
        {
            get
            {
                return _url;
            }
            set
            {
                OnurlChanging(value);
                ReportPropertyChanging("url");
                _url = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("url");
                OnurlChanged();
            }
        }
        private global::System.String _url;
        partial void OnurlChanging(global::System.String value);
        partial void OnurlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String embedHtml
        {
            get
            {
                return _embedHtml;
            }
            set
            {
                OnembedHtmlChanging(value);
                ReportPropertyChanging("embedHtml");
                _embedHtml = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("embedHtml");
                OnembedHtmlChanged();
            }
        }
        private global::System.String _embedHtml;
        partial void OnembedHtmlChanging(global::System.String value);
        partial void OnembedHtmlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] description
        {
            get
            {
                return StructuralObject.GetValidValue(_description);
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.Byte[] _description;
        partial void OndescriptionChanging(global::System.Byte[] value);
        partial void OndescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyMedia_Media", "CompanyMedia")]
        public EntityCollection<CompanyMedia> CompanyMedias
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyMedia>("BridgesAndLaddersModel.FK_CompanyMedia_Media", "CompanyMedia");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyMedia>("BridgesAndLaddersModel.FK_CompanyMedia_Media", "CompanyMedia", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BridgesAndLaddersModel", Name="ServiceArea")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceArea : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ServiceArea object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static ServiceArea CreateServiceArea(global::System.Int64 id, global::System.String name)
        {
            ServiceArea serviceArea = new ServiceArea();
            serviceArea.id = id;
            serviceArea.name = name;
            return serviceArea;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BridgesAndLaddersModel", "FK_CompanyServiceArea_ServiceArea", "CompanyServiceArea")]
        public EntityCollection<CompanyServiceArea> CompanyServiceAreas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CompanyServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_ServiceArea", "CompanyServiceArea");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CompanyServiceArea>("BridgesAndLaddersModel.FK_CompanyServiceArea_ServiceArea", "CompanyServiceArea", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
