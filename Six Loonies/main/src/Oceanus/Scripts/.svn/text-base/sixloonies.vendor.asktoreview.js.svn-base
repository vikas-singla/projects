var askReviewRecipientList = new Array();

$(function () {
    $("#askReviewRecipientInput").emptyText("Enter your friend's name here or select from below", "emptytextstyle");
});

function askReviewRecipientInputChange(evt) {
    evt = (evt) ? evt : event;
    var target = (evt.target) ? evt.target : evt.srcElement;
    var form = target.form;
    var charCode = (evt.charCode) ? evt.charCode :
        ((evt.which) ? evt.which : evt.keyCode);
    if (charCode == 13) {
        var inputVal = $('#askReviewRecipientInput').val();

        user = new Object();
        user.FullName = inputVal;
        user.UserId = inputVal;

        askReviewRecipientList.push(user);
        refreshMessageToUI();

        $("#askReviewRecipientInput").val("");
    }
    return true;
}

function escape_regexp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}

$.expr[':'].textEquals = function (a, i, m) {
    return $(a).text().match("^" + escape_regexp(m[3]) + "$");
};

$(document).ready(function () {
    $("#askReviewRecipientInput").autocomplete({
        minLength: 0,
        source: function (request, response) {
            var term = request.term;
            var results = new Array();
            for (i = 0; i < friendList.length; ++i) {
                if (friendList[i].FullName.toLowerCase().indexOf(term) != -1) {
                    results.push(friendList[i]);
                }
            }
            response($.map(results, function (item) {
                return { label: item.FullName, value: item.FullName, id: item.UserId }
            }))
        },
        select: function (event, ui) {
            user = new Object();
            user.FullName = ui.item.value;
            user.UserId = ui.item.id;

            askReviewRecipientList.push(user);
            refreshAskToReviewRecipientUI();

            $("#askReviewRecipientInput").val("");

            return false;
        },
        open: function (e, ui) {
            var 
            acData = $(this).data('autocomplete');

            acData
            .menu
            .element
            .find('a')
            .each(function () {
                var me = $(this);
                var regex = new RegExp(acData.term, "gi");
                me.html(me.text().replace(regex, function (matched) {
                    var termTemplate = '<span class="bold underline">%s</span>';
                    return termTemplate.replace('%s', matched);
                }));
            });
        },
        change: function (event, ui) {
            if (!ui.item) {
                if ($(".ui-autocomplete li:textEquals('" + $(this).val() + "')").size() == 0 && $(this).val() != $(this).attr("emptytext")) {
                    // remove invalid value, as it didn't match anything
                    relQuestId = -1;
                    $(this).val("");
                    $(this).data("autocomplete").term = "";
                    $(this).blur();
                    return false;
                }
            }
        }
    });

    $('#askReviewBtnSubmit').live('click', function () {
        var vendorId = $(this).attr("data-vid") + "";

        postAskToReviewMsg(vendorId);

        return false;
    });

    $('#askToReviewFormContent .btns .close').live('click', function () {
        askReviewRecipientList = new Array();
    });

    $('.askreviwerecipientsect').live('click', function () {
        $('#askReviewRecipientInput').focus();
        return false;
    });

    $('.tageditbtn').live('click', function () {
        var func = $(this).attr("data-func") + "";

        if (func != null && $.trim(func) != "") {
            func = $.trim(func);
            if (func == "remaskreviewrecipient") {
                var tid = $(this).attr("data-tid") + "";

                askReviewRecipientList.splice(tid, 1);
                refreshAskToReviewRecipientUI();
                return false;
            }
        }        
    });

    $('#askToReviewFormContent .friend').live('click', function () {
        var name = $(this).attr("data-fn") + "";
        var uid = $(this).attr("data-uid") + "";

        var user = new Object();
        user.FullName = name;
        user.UserId = uid;

        //check if already a recipient
        var addRecipient = true;
        for (i = 0; i < askReviewRecipientList.length; ++i) {
            if (askReviewRecipientList[i].UserId == uid) {
                addRecipient = false;
                break;
            }
        }

        if (addRecipient) {
            askReviewRecipientList.push(user);
            refreshAskToReviewRecipientUI();
        }

        return false;
    });
});

function refreshAskToReviewRecipientUI() {
    $('#askreviewrecipientArgs').html("");
    if (askReviewRecipientList != null) {
        for (i = 0; i < askReviewRecipientList.length; ++i) {
            var htmlstr = "<span class='tageditgray'>" +
                askReviewRecipientList[i].FullName + "<a href='#' class='tageditbtn' func='remaskreviewrecipient' tid='" + i + "'></a></span>";
            $('#askreviewrecipientArgs').append(htmlstr);
        }
    }
}

function postAskToReviewMsg(vendorId) {
    var messageBody = $.trim($("#askreviewmsginput").val());

    $.ajax(
    {
        type: "POST",
        dataType: 'json',
        traditional: true,
        url: "/Vendor/AskToReview",
        data: {
            recipients: JSON.stringify(retrieveAskToReviewUIDs(askReviewRecipientList)),
            message: messageBody,
            vendorId: vendorId
        },
        async: false,
        success: function (result) {
            showSuccessNotification('Your message for ask for review has been sent');
            $.fancybox.close();
        },
        error: function (req, status, error) {
            showErrorNotification('Error: Your message could not be sent. We have recorded the error for analysis and apologize for inconvenience. Please try again later.');
        }
    });
}

function retrieveAskToReviewUIDs() {
    var userIdList = new Array();

    for(i = 0; i < askReviewRecipientList.length; ++i)
    {
        userIdList.push(askReviewRecipientList[i].UserId);
    }

    return userIdList;
}