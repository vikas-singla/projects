var DualSelect_Separator = ";;;"; var DualSelect_SelectAvial = "_AvialSelect"; var DualSelect_SelectSelected = "_SelSelect"; var DualSelect_HiddenSelectedItemsVal = ""; var DualSelect_TempObjSource, DualSelect_TempObjDestination; function DualSelect_SetObjects(b, a) { if (a) { DualSelect_TempObjSource = document.getElementById(b + DualSelect_SelectAvial); DualSelect_TempObjDestination = document.getElementById(b + DualSelect_SelectSelected) } else { DualSelect_TempObjSource = document.getElementById(b + DualSelect_SelectSelected); DualSelect_TempObjDestination = document.getElementById(b + DualSelect_SelectAvial) } } function DualSelect_GetIndexForInsert(b, c) { if (b.autosort == "false") { return b.length + 1 } if (b.length == 0) { return 0 } for (var a = 0; a < b.length; a++) { if (b[a].text > c.text) { return a } } return b.length } function DualSelect_MoveElement(c, a) { DualSelect_SetObjects(c, a); if (DualSelect_TempObjSource.length == 0) { return } iLast = 0; for (var b = 0; b < DualSelect_TempObjSource.length; b++) { if (DualSelect_TempObjSource[b].selected) { iLast = b; var d = document.createElement("Option"); d.text = DualSelect_TempObjSource[b].text; d.value = DualSelect_TempObjSource[b].value; DualSelect_TempObjSource.remove(b); nPos = (DualSelect_TempObjDestination.length + 1); DualSelect_TempObjDestination.options.add(d, DualSelect_GetIndexForInsert(DualSelect_TempObjDestination, d)); b-- } } DualSelect_SaveSelection(c); if (DualSelect_TempObjSource.length > 0 && iLast == 0) { DualSelect_TempObjSource.selectedIndex = 0 } else { if (DualSelect_TempObjSource.length - 1 >= iLast) { DualSelect_TempObjSource.selectedIndex = iLast } else { if (DualSelect_TempObjSource.length >= 1) { DualSelect_TempObjSource.selectedIndex = iLast - 1 } } } DualSelect_ClearSelection(DualSelect_TempObjSource); DualSelect_TempObjSource.focus } function DualSelect_Move_Up(e, b) { DualSelect_SetObjects(e, b); if (DualSelect_TempObjSource.length == 0) { return } if (DualSelect_TempObjSource[0].selected) { return } for (var c = 1; c < DualSelect_TempObjSource.length; c++) { if (DualSelect_TempObjSource[c].selected) { var d = DualSelect_TempObjSource[c].value; var f = DualSelect_TempObjSource[c].text; var a = DualSelect_TempObjSource[c].selected; DualSelect_TempObjSource[c].value = DualSelect_TempObjSource[c - 1].value; DualSelect_TempObjSource[c].text = DualSelect_TempObjSource[c - 1].text; DualSelect_TempObjSource[c].selected = DualSelect_TempObjSource[c - 1].selected; DualSelect_TempObjSource[c - 1].value = d; DualSelect_TempObjSource[c - 1].text = f; DualSelect_TempObjSource[c - 1].selected = a; c-- } } DualSelect_SaveSelection(e) } function DualSelect_Move_Down(e, b) { DualSelect_SetObjects(e, b); if (DualSelect_TempObjSource.length == 0) { return } if (DualSelect_TempObjSource[DualSelect_TempObjSource.length - 1].selected) { return } for (var c = DualSelect_TempObjSource.length - 2; c > -1; c--) { if (DualSelect_TempObjSource[c].selected) { var d = DualSelect_TempObjSource[c].value; var f = DualSelect_TempObjSource[c].text; var a = DualSelect_TempObjSource[c].selected; DualSelect_TempObjSource[c].value = DualSelect_TempObjSource[c + 1].value; DualSelect_TempObjSource[c].text = DualSelect_TempObjSource[c + 1].text; DualSelect_TempObjSource[c].selected = DualSelect_TempObjSource[c + 1].selected; DualSelect_TempObjSource[c + 1].value = d; DualSelect_TempObjSource[c + 1].text = f; DualSelect_TempObjSource[c + 1].selected = a; c++ } } DualSelect_SaveSelection(e) } function DualSelect_MoveAll(b, a) { DualSelect_SetObjects(b, a); while (DualSelect_TempObjSource.length > 0) { oNode = document.createElement("Option"); oNode.text = DualSelect_TempObjSource[0].text; oNode.value = DualSelect_TempObjSource[0].value; DualSelect_TempObjSource.remove(DualSelect_TempObjSource[0]); DualSelect_TempObjDestination.options.add(oNode, DualSelect_GetIndexForInsert(DualSelect_TempObjDestination, oNode)) } DualSelect_SaveSelection(b) } function DualSelect_ClearSelection(b) { for (var a = 0; a < b.length; a++) { b[a].selected = false } } function DualSelect_SaveSelection(d) { var b = document.getElementById(d + DualSelect_SelectSelected); var c = ""; var e = ""; for (var a = 0; a < b.length; a++) { c += b[a].value + DualSelect_Separator } document.getElementsByName(d + DualSelect_HiddenSelectedItemsVal)[0].value = c } var defaultYear = 1970 + 0; var defaultMonth = 0 + 0; var defaultDay = 1 + 0; var defaultHour = 0 + 0; var defaultMinute = 0 + 0; var defaultSecond = 0 + 0; function DateInput_Initialize(a) { if (document.getElementById(a + "_Year") != null) { document.getElementById(a + "_Year").onkeypress = DateInputYearKeyVerify; document.getElementById(a + "_Year").onpaste = DateInputYearHandlePaste; document.getElementById(a + "_Year").ondrop = DateInputYearHandlePaste; document.getElementById(a + "_Year").onchange = DateInputChanged } if (document.getElementById(a + "_Month") != null) { document.getElementById(a + "_Month").onchange = DateInputChanged } if (document.getElementById(a + "_Day") != null) { document.getElementById(a + "_Day").onchange = DateInputChanged } if (document.getElementById(a + "_Hours") != null) { document.getElementById(a + "_Hours").onchange = DateInputChanged } if (document.getElementById(a + "_Minutes") != null) { document.getElementById(a + "_Minutes").onchange = DateInputChanged } if (document.getElementById(a + "_Seconds") != null) { document.getElementById(a + "_Seconds").onchange = DateInputChanged } } function DateInputGetNumDays(b, a) { b = b + 1; if (a % 4 == 0) { return (b == 9 || b == 4 || b == 6 || b == 11) ? 30 : (b == 2) ? 29 : 31 } else { return (b == 9 || b == 4 || b == 6 || b == 11) ? 30 : (b == 2) ? 28 : 31 } } function DateTimeAdjustYears(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option("   " + i, i) } else { if (i < 100) { d.options[b] = new Option("  " + i, i) } else { if (i < 1000) { d.options[b] = new Option(" " + i, i) } else { d.options[b] = new Option("" + i, i) } } } b++ } } function DateTimeAdjustMonthes(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } d.options.length = 0; for (i = c; i <= a; i++) { d.options[b] = new Option(DateTimeMonthes[i], i + 1); b++ } } function DateTimeAdjustDays(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option(" " + i, i) } else { d.options[b] = new Option("" + i, i) } b++ } } function DateTimeAdjustTimeElement(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option("0" + i, i) } else { d.options[b] = new Option("" + i, i) } b++ } } function DateInputYearHandlePaste(a) { a = (a) ? (a) : ((window.event) ? (window.event) : null); if (a == null) { return true } var b = (a.target) ? (a.target) : ((event.srcElement) ? (event.srcElement) : null); if (b == null) { return true } var c; if (a.type == "paste") { c = window.clipboardData.getData("Text") } else { if (a.type == "drop") { c = a.dataTransfer.getData("Text") } else { return true } } for (i = 0; i < c.length; i++) { keyCode = c.charCodeAt(i); if (keyCode == 13 || keyCode == 8) { continue } if ((keyCode >= 48) && (keyCode <= 57)) { continue } else { return false } } b.value = c; return false } function DateInputYearKeyVerify(a) { a = (a) ? (a) : ((window.event) ? (window.event) : null); if (a == null) { return true } var b = (a.target) ? (a.target) : ((event.srcElement) ? (event.srcElement) : null); if (b == null) { return true } var c = ((a.charCode || a.initEvent) ? a.charCode : ((a.which) ? a.which : a.keyCode)); if (c == 0 || c == 13 || c == 8) { return true } if ((c >= 48) && (c <= 57)) { return true } return false; var d = b.value } function DateInputChanged(evt, cid, update) { var clientID; if (cid == null) { evt = (evt) ? (evt) : ((window.event) ? (window.event) : null); if (evt == null) { return false } var sorg = (evt.target) ? (evt.target) : ((event.srcElement) ? (event.srcElement) : null); if (sorg == null) { return false } clientID = sorg.id.substring(0, sorg.id.lastIndexOf("_")) } else { clientID = cid } if (eval(clientID + "Recursive") == true) { return } eval(clientID + "Recursive = true;"); var Nanno; var Nmese; var Ngiorno; var NHours; var NMinutes; var NSeconds; var CurrDate = eval(clientID + "_Curr"); var CurrDay = CurrDate.getDate(); var CurrMonth = CurrDate.getMonth(); var CurrYear = CurrDate.getFullYear(); var CurrHours = CurrDate.getHours(); var CurrMinutes = CurrDate.getMinutes(); var CurrSeconds = CurrDate.getSeconds(); var currMin = eval(clientID + "_MinDate"); var currMax = eval(clientID + "_MaxDate"); var dynamicMin = null; if (eval("(typeof " + clientID + "_ClientDynamicMin !== 'undefined') && (" + clientID + "_ClientDynamicMin != null)") == true) { dynamicMin = eval(clientID + "_ClientDynamicMin()") } var dynamicMax = null; if (eval("(typeof " + clientID + "_ClientDynamicMax !== 'undefined') && (" + clientID + "_ClientDynamicMax != null)") == true) { dynamicMax = eval(clientID + "_ClientDynamicMax()") } if (dynamicMin != null && (currMin == null || dynamicMin > currMin)) { if (dynamicMin > currMax) { currMin = currMax } else { currMin = dynamicMin } } if (dynamicMax != null && (currMax == null || dynamicMax < currMax)) { if (dynamicMax < currMin) { currMax = currMin } else { currMax = dynamicMax } } if (document.getElementById(clientID + "_Year") != null) { Nanno = document.getElementById(clientID + "_Year").value } else { Nanno = CurrYear } if (document.getElementById(clientID + "_Month") != null) { Nmese = document.getElementById(clientID + "_Month").value } else { Nmese = CurrMonth } if (document.getElementById(clientID + "_Day") != null) { Ngiorno = document.getElementById(clientID + "_Day").value } else { Ngiorno = CurrDay } if (document.getElementById(clientID + "_Hours") != null) { NHours = document.getElementById(clientID + "_Hours").value } else { NHours = CurrHours } if (document.getElementById(clientID + "_Minutes") != null) { NMinutes = document.getElementById(clientID + "_Minutes").value } else { NMinutes = CurrMinutes } if (document.getElementById(clientID + "_Seconds") != null) { NSeconds = document.getElementById(clientID + "_Seconds").value } else { NSeconds = CurrSeconds } var TempNewDate = new Date(Nanno, Nmese - 1, Ngiorno, NHours, NMinutes, NSeconds); if (currMax != null && currMax < TempNewDate) { TempNewDate = currMax } if (currMin != null && currMin > TempNewDate) { TempNewDate = currMin } Nanno = TempNewDate.getFullYear() + ""; Nmese = (TempNewDate.getMonth() + 1) + ""; Ngiorno = TempNewDate.getDate() + ""; NHours = TempNewDate.getHours() + ""; NMinutes = TempNewDate.getMinutes() + ""; NSeconds = TempNewDate.getSeconds() + ""; var NewYear; var NewMonth; var NewDay; var NewHours; var NewMinutes; var NewSeconds; var MaxYear; var MinYear; var MaxMonth; var MinMonth; var MinDay; var MaxDay; var MinHours; var MaxHours; var MinMinutes; var MaxMinutes; var MinSeconds; var MaxSeconds; eval(clientID + "_Valid = true"); NewYear = parseInt(Nanno); if (!isNaN(NewYear)) { if (currMax == null) { MaxYear = null } else { MaxYear = currMax.getFullYear() } if (currMin == null) { MinYear = null } else { MinYear = currMin.getFullYear() } if (MaxYear != null && MaxYear < NewYear) { NewYear = MaxYear } if (MinYear != null && MinYear > NewYear) { NewYear = MinYear } if (document.getElementById(clientID + "_Year") != null && !eval(clientID + "_DateHidden") && eval(clientID + "_YearCombo")) { DateTimeAdjustYears(document.getElementById(clientID + "_Year"), MinYear, MaxYear) } if ((MaxYear == null || MaxYear >= NewYear) && (MinYear == null || MinYear <= NewYear)) { MaxMonth = 11; MinMonth = 0; if (MaxYear == NewYear) { MaxMonth = currMax.getMonth() } if (MinYear == NewYear) { MinMonth = currMin.getMonth() } NewMonth = parseInt(Nmese); if (!isNaN(NewMonth)) { NewMonth = NewMonth - 1; if (MinMonth > NewMonth) { NewMonth = MinMonth } if (MaxMonth < NewMonth) { NewMonth = MaxMonth } if (CurrYear == MinYear || CurrYear == MaxYear || NewYear == MinYear || NewYear == MaxYear) { if (document.getElementById(clientID + "_Month") != null && !eval(clientID + "_DateHidden")) { DateTimeAdjustMonthes(document.getElementById(clientID + "_Month"), MinMonth, MaxMonth) } } MinDay = 1; MaxDay = DateInputGetNumDays(NewMonth, NewYear); if (MaxYear == NewYear && MaxMonth == NewMonth) { MaxDay = currMax.getDate() } if (MinYear == NewYear && MinMonth == NewMonth) { MinDay = currMin.getDate() } NewDay = parseInt(Ngiorno); if (!isNaN(NewDay)) { if (MinDay > NewDay) { NewDay = MinDay } if (MaxDay < NewDay) { NewDay = MaxDay } if (document.getElementById(clientID + "_Day") != null && !eval(clientID + "_DateHidden")) { DateTimeAdjustDays(document.getElementById(clientID + "_Day"), MinDay, MaxDay) } MinHours = 0; MaxHours = 23; if (MaxYear == NewYear && MaxMonth == NewMonth && NewDay == MaxDay) { MaxHours = currMax.getHours() } if (MinYear == NewYear && MinMonth == NewMonth && NewDay == MinDay) { MinHours = currMin.getHours() } NewHours = parseInt(NHours); if (!isNaN(NewHours)) { if (MaxHours < NewHours) { NewHours = MaxHours } if (NewHours < MinHours) { NewHours = MinHours } if (document.getElementById(clientID + "_Hours") != null) { DateTimeAdjustTimeElement(document.getElementById(clientID + "_Hours"), MinHours, MaxHours) } MinMinutes = 0; MaxMinutes = 59; if (MaxYear == NewYear && MaxMonth == NewMonth && NewDay == MaxDay && MaxHours == NewHours) { MaxMinutes = currMax.getMinutes() } if (MinYear == NewYear && MinMonth == NewMonth && NewDay == MinDay && MinHours == NewHours) { MinMinutes = currMin.getMinutes() } NewMinutes = parseInt(NMinutes); if (!isNaN(NewMinutes)) { if (MaxMinutes < NewMinutes) { NewMinutes = MaxMinutes } if (MinMinutes > NewMinutes) { NewMinutes = MinMinutes } if (document.getElementById(clientID + "_Minutes") != null) { DateTimeAdjustTimeElement(document.getElementById(clientID + "_Minutes"), MinMinutes, MaxMinutes) } MinSeconds = 0; MaxSeconds = 59; if (MaxYear == NewYear && MaxMonth == NewMonth && NewDay == MaxDay && MaxHours == NewHours && MaxMinutes == NewMinutes) { MaxSeconds = currMax.getSeconds() } if (MinYear == NewYear && MinMonth == NewMonth && NewDay == MinDay && MinHours == NewHours && MinMinutes == NewMinutes) { MinSeconds = currMin.getSeconds() } NewSeconds = parseInt(NSeconds); if (!isNaN(NewSeconds)) { if (MaxSeconds < NewSeconds) { NewSeconds = MaxSeconds } if (NewSeconds < MinSeconds) { NewSeconds = MinSeconds } if (document.getElementById(clientID + "_Seconds") != null) { DateTimeAdjustTimeElement(document.getElementById(clientID + "_Seconds"), MinSeconds, MaxSeconds) } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } else { eval(clientID + "_Valid = false") } } } else { eval(clientID + "_Valid = false") } var AChange = false; if (eval(clientID + "_Valid")) { if (update == true || (cid == null && (CurrYear != NewYear || CurrMonth != NewMonth || CurrDay != NewDay || CurrHours != NewHours || CurrMinutes != NewMinutes || CurrSeconds != NewSeconds))) { AChange = true } CurrYear = NewYear; CurrMonth = NewMonth; CurrDay = NewDay; CurrHours = NewHours; CurrMinutes = NewMinutes; CurrSeconds = NewSeconds } if (!AChange) { eval(clientID + "Recursive = false;"); return true } eval(clientID + "_Curr = new Date(CurrYear, CurrMonth, CurrDay, CurrHours, CurrMinutes, CurrSeconds)"); if (document.getElementById(clientID + "_Year") != null) { document.getElementById(clientID + "_Year").value = CurrYear } if (document.getElementById(clientID + "_Month") != null) { document.getElementById(clientID + "_Month").value = CurrMonth + 1 } if (document.getElementById(clientID + "_Day") != null) { document.getElementById(clientID + "_Day").value = CurrDay } if (document.getElementById(clientID + "_Hours") != null) { document.getElementById(clientID + "_Hours").value = CurrHours } if (document.getElementById(clientID + "_Minutes") != null) { document.getElementById(clientID + "_Minutes").value = CurrMinutes } if (document.getElementById(clientID + "_Seconds") != null) { document.getElementById(clientID + "_Seconds").value = CurrSeconds } var currDate = eval(clientID + "_Curr"); RefreshDependencies(clientID); eval(clientID + "_ClientDateChanged(" + currDate.getTime() + ")"); eval(clientID + "Recursive = false;"); return true } function SetDateInput(id, value, cType) { if (eval("typeof " + id + "_Curr === 'undefined'") == true) { return } var currDate = eval(id + "_Curr"); if (currDate == null) { return } var currDateInMilliseconds = currDate.getTime(); if (cType == 1 && value >= currDateInMilliseconds) { return } if (cType == 2 && value <= currDateInMilliseconds) { return } var DateInFormat = new Date(value); if (document.getElementById(id + "_Hours") != null) { if (document.getElementById(id + "_Year" != null)) { document.getElementById(id + "_Year").value = DateInFormat.getFullYear(); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Month") != null) { document.getElementById(id + "_Month").value = (DateInFormat.getMonth() + 1); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Day") != null) { document.getElementById(id + "_Day").value = DateInFormat.getDate(); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Hours") != null) { document.getElementById(id + "_Hours").value = DateInFormat.getHours(); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Minutes") != null) { document.getElementById(id + "_Minutes").value = DateInFormat.getMinutes(); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Seconds") != null) { document.getElementById(id + "_Seconds").value = DateInFormat.getSeconds(); DateInputChanged(null, id, true) } else { if (document.getElementById(id + "_Year" != null)) { document.getElementById(id + "_Year").value = DateInFormat.getFullYear(); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Month") != null) { document.getElementById(id + "_Month").value = (DateInFormat.getMonth() + 1); DateInputChanged(null, id, false) } if (document.getElementById(id + "_Day") != null) { document.getElementById(id + "_Day").value = DateInFormat.getDate(); DateInputChanged(null, id, true) } } } } function GetDateInput(id) { return eval(id + "_Curr") } function AddToUpdateList(id, toAdd) { if (id == null || toAdd == null) { return } var currIndex = eval(id + "_UpdateListIndex"); eval(id + "_UpdateList[" + currIndex + "] = '" + toAdd + "';"); currIndex++; eval(id + "_UpdateListIndex = " + currIndex + ";") } function RefreshDependencies(id) { if (eval("typeof " + id + "_UpdateListIndex === 'undefined'") == true) { return } var length = eval(id + "_UpdateListIndex"); if (length == null) { return } for (var i = 0; i < length; i++) { DateInputChanged(null, eval(id + "_UpdateList[" + i + "]"), true) } } var DataButtonCancel = "DataButtonCancel"; var DataButtonDelete = "DataButtonDelete"; var DataButtonUndelete = "DataButtonUndelete"; var DataButtonEdit = "DataButtonEdit"; var DataButtonInsert = "DataButtonInsert"; var DisplayPostfix = "_Display"; var EditPostfix = "_Edit"; var UndeletePostfix = "_Undelete"; var ChangedExternallyPostfix = "_ChangedExternally"; var SavePostFix = "_Save"; var SavePostFixD = "_SaveD"; var SavePostFixU = "_SaveU"; var SavePostFixC = "_SaveC"; var DeletedPostFix = "_Deleted"; var ContainerPostFix = "_Container"; var VarPostfix = "_Var"; var AllNormalPostfix = "_AllNormal"; var ChandedPostfix = "_Changed"; function DataButton_Click(itemRoot, itemChanged, dataButtonType) { if (dataButtonType == DataButtonDelete) { var undel = eval(itemRoot + SavePostFixU); if (undel != null) { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).before(temp.clone(true)); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).remove() } else { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).css("display", "none") } $("#" + itemRoot + EditPostfix + ContainerPostFix).remove(); $("#" + itemChanged).val("True"); eval(itemRoot + DeletedPostFix + " = true;") } else { if (dataButtonType == DataButtonEdit || dataButtonType == DataButtonInsert) { var temp = eval(itemRoot + SavePostFix); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).before(temp.clone(true)); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).remove(); $("#" + itemChanged).val("True") } else { if (dataButtonType == DataButtonCancel) { var temp = eval(itemRoot + SavePostFixD); $("#" + itemRoot + EditPostfix + ContainerPostFix).before(temp.clone(true)); $("#" + itemRoot + EditPostfix + ContainerPostFix).remove(); $("#" + itemChanged).val("False") } else { if (dataButtonType == DataButtonUndelete) { var undel = eval(itemRoot + SavePostFixU); var temp = eval(itemRoot + SavePostFixD); if (undel != null) { $("#" + itemRoot + UndeletePostfix + ContainerPostFix).before(temp.clone(true)); $("#" + itemRoot + UndeletePostfix + ContainerPostFix).remove() } else { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).replaceWith(temp.clone(true)) } eval(itemRoot + DeletedPostFix + " = false;"); $("#" + itemChanged).val("False") } } } } } function DataGrid_Prepare_Item(itemRoot, itemChanged, deleted, root) { var temp = eval(root + AllNormalPostfix); if (temp == null) { temp = new Array() } temp.push(itemRoot); eval(root + AllNormalPostfix + " = temp"); temp = $("#" + itemRoot + EditPostfix + ContainerPostFix).clone(true); eval(itemRoot + SavePostFix + " = temp;"); temp = $("#" + itemRoot + DisplayPostfix + ContainerPostFix).clone(true); eval(itemRoot + SavePostFixD + " = temp;"); temp = $("#" + itemRoot + ChangedExternallyPostfix + ContainerPostFix).clone(true); if (temp != null && temp.size() == 0) { temp = null } eval(itemRoot + SavePostFixC + " = temp;"); $("#" + itemRoot + ChangedExternallyPostfix + ContainerPostFix).remove(); temp = $("#" + itemRoot + UndeletePostfix + ContainerPostFix).clone(true); if (temp != null && temp.size() == 0) { temp = null } eval(itemRoot + SavePostFixU + " = temp;"); if (deleted) { $("#" + itemRoot + EditPostfix + ContainerPostFix).remove(); if (temp == null) { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).css("display", "none") } else { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).remove() } eval(itemRoot + DeletedPostFix + " = true;") } else { $("#" + itemRoot + UndeletePostfix + ContainerPostFix).remove(); if (eval(itemChanged + VarPostfix)) { $("#" + itemRoot + EditPostfix + ContainerPostFix).remove() } else { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).remove() } eval(itemRoot + DeletedPostFix + " = false;") } } function Update_Permutations(n) { var h = n.lastIndexOf("___"); if (h < 0) { return } var a = n.substring(0, h); h = a.lastIndexOf("___"); a = a.substring(0, h); if (h < 0) { return } var l = document.getElementById(a + "_Permutation"); if (l == null) { return } var k = document.getElementById(a + "_ItemsContainer"); if (k == null) { return } var j = ""; for (i = 0; i < k.childNodes.length; i++) { var c = k.childNodes[i].getAttribute("id"); var e = c.lastIndexOf("_"); if (e < 0) { continue } var g = c.substring(0, e + 1) + "Deleted"; var m = document.getElementById(g); if (m != null && m.value == "True") { continue } var f = c.lastIndexOf("___"); var d = c.substring(0, f); var b = d.lastIndexOf("_") + 1; d = d.substring(b); if (i > 0) { j = j + "," } j = j + d } l.value = j } var ManipulationButtonRemove = "ManipulationButtonRemove"; var ManipulationButtonHide = "ManipulationButtonHide"; var ManipulationButtonShow = "ManipulationButtonShow"; var ManipulationButtonResetGrid = "ManipulationButtonResetGrid"; var ManipulationButtonCustom = "ManipulationButtonCustom"; function ManipulationButton_Click(target, dataButtonType) { var end_prefix = target.lastIndexOf("_"); var deleteName = target.substring(0, end_prefix); end_prefix = deleteName.lastIndexOf("_"); deleteName = deleteName.substring(0, end_prefix + 1) + "Deleted"; var deletedHidden = document.getElementById(deleteName); if (dataButtonType == ManipulationButtonRemove) { $("#" + target).remove(); Update_Permutations(target) } else { if (dataButtonType == ManipulationButtonHide) { $("#" + target).css("visibility", "hidden"); if (deletedHidden != null) { deletedHidden.value = "True" } Update_Permutations(target) } else { if (dataButtonType == ManipulationButtonShow) { $("#" + target).css("visibility", "visible"); if (deletedHidden != null) { deletedHidden.value = "False" } Update_Permutations(target) } else { if (dataButtonType == ManipulationButtonResetGrid) { var toUndo = eval(target + AllNormalPostfix); if (toUndo != null) { for (var i = 0; i < toUndo.length; i++) { var vChanged = toUndo[i].substring(0, toUndo[i].lastIndexOf("_")) + ChandedPostfix; var deleted = eval(toUndo[i] + DeletedPostFix); if (deleted != null && deleted == true) { DataButton_Click(toUndo[i], vChanged, DataButtonUndelete) } else { DataButton_Click(toUndo[i], vChanged, DataButtonCancel) } } } } else { eval(target) } } } } } function PageButton_Click(b, a) { var c = document.getElementById(b); c.value = a; $("#" + b).parents("form").submit() } function Sort_Handler(field, buttonName, initialize, causePostback, clientOrderChanged, sortField, pageField, cssNoSort, cssAscending, cssDescending) { var order = $("#" + sortField).val(); var hasAscending = order.indexOf(" " + field + "#+;"); var hasDescending = order.indexOf(" " + field + "#-;"); var prevOrder = ""; var actualOrder = ""; if (!initialize) { if (hasDescending >= 0) { order = order.replace(" " + field + "#-;", ""); $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssDescending); $("#" + buttonName).addClass(cssNoSort); prevOrder = "-" } else { if (hasAscending >= 0) { order = order.replace(" " + field + "#+;", " " + field + "#-;"); $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssAscending); $("#" + buttonName).addClass(cssDescending); prevOrder = "+"; actualOrder = "-" } else { order = order + " " + field + "#+;"; $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssNoSort); $("#" + buttonName).addClass(cssAscending); actualOrder = "+" } } if (pageField != null) { $("#" + pageField).val("1") } if (clientOrderChanged != null) { eval(clientOrderChanged + "('" + field + "', '" + prevOrder + "', '" + actualOrder + "')") } if (causePostback) { $("#" + sortField).parents("form").submit() } } else { if (hasDescending >= 0) { $("#" + buttonName).addClass(cssDescending) } else { if (hasAscending >= 0) { $("#" + buttonName).addClass(cssAscending) } else { $("#" + buttonName).addClass(cssNoSort) } } } } function OnBeginDetailForm(baseName, detailType, rowId) { detailBusy = eval(baseName + "_DetailBusy"); if (detailBusy) { return false } eval(baseName + "_DetailBusy = true;"); eval(baseName + "_TypeDetail = '" + detailType + "';"); if (rowId != null) { if (detailType == "Insert") { eval(baseName + "_CurrentRow = null;") } else { eval(baseName + "_CurrentRow = '" + rowId + "';") } } return true } function OnFailureDetailForm(baseName, displayExecute, editExecute) { var detailType = eval(baseName + "_TypeDetail"); if (detailType == "Display") { if (displayExecute != null) { (displayExecute + "();") } } else { if (editExecute != null) { (editExecute + "();") } } eval(baseName + "_DetailBusy = false;") } function TrueValue(value, fieldName) { var trueValue = value; try { trueValue = eval(fieldName + "_True") } catch (e) { } return trueValue } function FormattedValue(value, fieldName) { var fValue = value; try { fValue = eval(fieldName + "_Format") } catch (e) { } return fValue } function GlobalEvalScriptInElementId(d) { var a = $("#" + d.id).find("script"); var c = ""; for (var b = 0; b < a.length; b++) { c += a[b].text } jQuery.globalEval(c) } function OnSuccessDetailForm(baseName, displayExecute, editExecute, ajaxContext) { GlobalEvalScriptInElementId(ajaxContext.get_updateTarget()); var detailType = eval(baseName + "_TypeDetail"); var changedFieldCss = eval(baseName + "_ChangedFieldCss"); var deletedRecordCss = eval(baseName + "_DeletedRecordCss"); var isValid = false; var hiddenIsValid = document.getElementById("IsValid"); if (hiddenIsValid != null && hiddenIsValid.value == "True") { isValid = true } if (isValid && (detailType == "FirstEdit" || detailType == "Edit" || detailType == "Display")) { var itemRoot = eval(baseName + "_CurrentRow"); var fieldsToUpdate = eval(baseName + "_FieldsToUpdate").split(","); var detailRoot = eval(baseName + "_DetailPrefix"); if (itemRoot != null) { var oldItemRoot = itemRoot.substring(0, itemRoot.lastIndexOf("Value")) + "OldValue"; var isInsert = true; var isExternalDelete = true; var changedDisplay = eval(itemRoot + SavePostFixC); var changedDisplayAvailable = false; if (changedDisplay == null) { changedDisplay = eval(itemRoot + SavePostFixD) } else { changedDisplayAvailable = true } for (var i = 0; i < fieldsToUpdate.length; i++) { var oldField = document.getElementById(oldItemRoot + "_" + fieldsToUpdate[i]); if (oldField != null) { isInsert = false } var newFieldName = null; if (detailRoot.length == 0) { newFieldName = fieldsToUpdate[i] } else { newFieldName = oldItemRoot + "_" + fieldsToUpdate[i] } var newField = document.getElementById(newFieldName); if (newField != null) { isExternalDelete = false } if (oldField != null) { var newValue = null; var newFormattedValue = null; if (newField != null && newField.getAttribute("type") != null && newField.getAttribute("type").toLocaleLowerCase() == "checkbox") { if (newField.getAttribute("checked") != null && newField.getAttribute("checked").toLocaleLowerCase() == "checked") { newValue = "True" } else { newValue = "False" } } else { if (newField != null) { if (newField.nodeName != null && newField.nodeName.toLocaleLowerCase() == "input") { newValue = TrueValue(newField.value, newFieldName); newFormattedValue = FormattedValue(newField.value, newFieldName) } else { newValue = TrueValue(newField.childNodes(0).nodeValue, newFieldName); newFormattedValue = FormattedValue(newField.childNodes(0).nodeValue, newFieldName) } } else { newValue = TrueValue(null, newFieldName); newFormattedValue = FormattedValue(null, newFieldName) } } var itemToUpdate = changedDisplay.find("#" + itemRoot + "_" + fieldsToUpdate[i]); if (changedFieldCss != null) { if (newValue != null && oldField.value != newValue) { itemToUpdate.addClass(changedFieldCss) } else { itemToUpdate.removeClass(changedFieldCss) } } if (newValue != null && oldField.value != newValue) { oldField.value = newValue; if (itemToUpdate.length != 0) { var inputType = itemToUpdate.attr("type"); if (inputType != null && inputType.toLocaleLowerCase() == "checkbox") { itemToUpdate.removeAttr("checked"); if (newValue.toLocaleLowerCase() == "true") { itemToUpdate.attr("checked", "checked") } } else { itemToUpdate.html(newFormattedValue) } } } } } if (isExternalDelete) { $('input[id^="' + oldItemRoot + '"]').remove(); if (deletedRecordCss != null) { var newSavePostFixD = eval(itemRoot + SavePostFixD); newSavePostFixD.addClass(deletedRecordCss); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).replaceWith(newSavePostFixD.clone(true)) } } else { if (!isInsert) { if (changedDisplayAvailable) { eval(itemRoot + SavePostFixD + " = " + itemRoot + SavePostFixC + ";") } var newSavePostFixD = eval(itemRoot + SavePostFixD); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).replaceWith(newSavePostFixD.clone(true)) } } } } if (detailType == "Display") { if (displayExecute != null) { eval(displayExecute + "();") } } else { if (editExecute != null) { eval(editExecute + "();") } } eval(baseName + "_DetailBusy = false;") };